--- components/serialization/common/transport/ser_phy/ser_phy_hci_slip.c
+++ components/serialization/common/transport/ser_phy/ser_phy_hci_slip.c
@@ -41,7 +41,7 @@
 #include "nrf_gpio.h"
 #include "app_uart.h"
 #include "ser_phy_hci.h"
-#include "app_error.h"
+
 #include "app_util_platform.h"
 #include "nrf_soc.h"

@@ -91,7 +91,6 @@ static ser_phy_hci_pkt_params_t m_crc_pending;
 static ser_phy_hci_slip_evt_t           m_ser_phy_hci_slip_event;
 static ser_phy_hci_slip_event_handler_t m_ser_phy_hci_slip_event_handler; /**< Event handler for upper layer */

-static bool    m_other_side_active = false; /**< Flag indicating that the other side is running */
 static uint8_t m_rx_byte;                   /**< Rx byte passed from low-level driver */

 static bool m_rx_escape = false;
@@ -500,9 +499,6 @@ static void ser_phi_hci_rx_byte(uint8_t rx_byte)
     {
         /* Both buffers are not available - cannot continue reception*/
         rx_sync = false;
-
-        /* Block RXRDY interrupts at this point*/
-        NRF_UART0->INTENCLR = (UART_INTENCLR_RXDRDY_Clear << UART_INTENCLR_RXDRDY_Pos);
         return;
     }

@@ -542,12 +538,6 @@ uint32_t ser_phy_hci_slip_rx_buf_free(uint8_t * p_buffer)
         }
     }

-    if (err_code == NRF_SUCCESS)
-    {
-        /* Unblock RXRDY interrupts at this point*/
-        NRF_UART0->INTENSET = (UART_INTENSET_RXDRDY_Set << UART_INTENSET_RXDRDY_Pos);
-    }
-
     return err_code;
 }

@@ -577,15 +567,6 @@ static void ser_phy_uart_evt_callback(app_uart_evt_t * uart_evt)
             break;

         case APP_UART_DATA:
-
-            // After first reception disable pulldown - it was only needed before start
-            // of the other side
-            if (!m_other_side_active)
-            {
-                nrf_gpio_cfg_input(comm_params.rx_pin_no, NRF_GPIO_PIN_NOPULL);
-                m_other_side_active = true;
-            }
-
             m_rx_byte = uart_evt->data.value;
             ser_phi_hci_rx_byte(m_rx_byte);
             break;
@@ -636,13 +617,11 @@ void ser_phy_hci_slip_close(void)

 void ser_phy_hci_slip_interrupts_enable(void)
 {
-    NVIC_EnableIRQ(UART0_IRQn);
 }


 void ser_phy_hci_slip_interrupts_disable(void)
 {
-    NVIC_DisableIRQ(UART0_IRQn);
 }


